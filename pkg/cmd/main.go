package main

import (
	"encoding/hex"
	"fmt"
	"frame_reductor/model"
	"net"
	"os"
	"time"
)

func main() {

	// Przykładowe dane ramki konfiguracyjnej (muszą być rzeczywiste)
	frameData := []byte{
		//0xaa, 0x52, 0x00, 0xb6, 0x00, 0x65, 0x67, 0x1e, 0xc1, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		//0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x06, 0x53, 0x48, 0x45, 0x4c, 0x42, 0x59, 0x00, 0x02, 0xb6,
		//0x8e, 0x96, 0x27, 0xc9, 0x58, 0x48, 0x35, 0xae, 0x84, 0xee, 0x58, 0x8d, 0x8a, 0x72, 0x5f, 0x00,
		//0x0f, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x42, 0x75, 0x73, 0x20, 0x31, 0x05, 0x42, 0x75, 0x73,
		//0x20, 0x32, 0x07, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x76, 0x61, 0x04, 0x44, 0x65, 0x6c, 0x6c, 0x0c,
		//0x4c, 0x61, 0x67, 0x6f, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x65, 0x6b, 0x00, 0x08, 0x01, 0x00,
		//0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00,
		//0x00, 0x08, 0x0c, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80,
		//0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x42, 0x16, 0x00,
		//0x00, 0xc2, 0xc5, 0x33, 0x33, 0x7f, 0x80, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		//0x00, 0x00, 0x19, 0xf1, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0xaa, 0x52, 0x00, 0xb6, 0x00, 0x65, 0x67, 0x26, 0x73, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x06, 0x53, 0x48, 0x45, 0x4c, 0x42, 0x59, 0x00, 0x02, 0xb6,
		0x8e, 0x96, 0x27, 0xc9, 0x58, 0x48, 0x35, 0xae, 0x84, 0xee, 0x58, 0x8d, 0x8a, 0x72, 0x5f, 0x00,
		0x0f, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x42, 0x75, 0x73, 0x20, 0x31, 0x05, 0x42, 0x75, 0x73,
		0x20, 0x32, 0x07, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x76, 0x61, 0x04, 0x44, 0x65, 0x6c, 0x6c, 0x0c,
		0x4c, 0x61, 0x67, 0x6f, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x65, 0x6b, 0x00, 0x08, 0x01, 0x00,
		0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x08, 0x0c, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x42, 0x16, 0x00,
		0x00, 0xc2, 0xc5, 0x33, 0x33, 0x7f, 0x80, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x19, 0x28, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// ... kontynuuj z pozostałymi bajtami w podobny sposób ...
	}

	header, err := model.DecodeC37Header(frameData[:18])
	if err != nil {
		fmt.Println("Błąd dekodowania nagłówka:", err)
		return
	}
	fmt.Printf("Header: %v", header)

	// Dekodowanie ramki konfiguracyjnej
	cfgFrame3, err := model.DecodeConfigurationFrame3(frameData)
	if err != nil {
		fmt.Println("Błąd dekodowania ramki konfiguracyjnej 3:", err)
		return
	}
	fmt.Printf("Decoded Configuration Frame 3: %+v\n", cfgFrame3)

	// Wyświetlenie informacji o ramce konfiguracyjnej
	//fmt.Printf("Configuration Frame:\n")
	//fmt.Printf("ID Code: %d\n", cfg.IDCode)
	//fmt.Printf("Frame Size: %d\n", cfg.FrameSize)
	//fmt.Printf("Frame Type: %d\n", cfg.FrameType)
	//fmt.Printf("Num PMUs: %d\n", cfg.NumPMUs)
	//fmt.Printf("DataPhasor Names:\n")
	//for i, name := range cfg.PhasorNames {
	//	fmt.Printf("  DataPhasor %d: %s\n", i+1, name)
	//}

	// Adres lokalny na porcie 4716
	addr := net.UDPAddr{
		Port: 4716,
		IP:   net.ParseIP("0.0.0.0"),
	}

	// Otwieramy gniazdo UDP
	conn, err := net.ListenUDP("udp", &addr)
	if err != nil {
		fmt.Println("Błąd podczas otwierania gniazda:", err)
		return
	}
	defer conn.Close()

	// Otwieramy plik do zapisu ramek
	file, err := os.Create("udp_frames.txt")
	if err != nil {
		fmt.Println("Błąd podczas tworzenia pliku:", err)
		return
	}
	defer file.Close()

	// Ustawiamy czas zakończenia nasłuchu
	timeout := time.After(180 * time.Second)

	fmt.Println("Nasłuchuję ramek UDP przez 300 sekund...")

	// Bufor do odczytu danych
	//buf := make([]byte, 1024)

loop:
	for {
		select {
		case <-timeout:
			fmt.Println("Czas nasłuchu upłynął.")
			break loop
		default:
			// Przykładowa ramka UDP (66 bajtów),
			// Zwiększony rozmiar bufora, aby uniknąć błędów związanych z dużymi ramkami
			frame := make([]byte, 1024)
			// Odbieramy dane UDP
			conn.SetReadDeadline(time.Now().Add(1 * time.Second))
			n, _, err := conn.ReadFromUDP(frame)
			if err != nil {
				if netErr, ok := err.(net.Error); ok && netErr.Timeout() {
					continue // kontynuuj nasłuch po timeout
				}
				fmt.Println("Błąd podczas odczytu ramki: ", err)
				fmt.Println("Wykryta długość ramki: ", n)
				break loop
			}

			// Konwersja ramki do formatu hex
			hexFrame := hex.EncodeToString(frame)

			// Zapisujemy ramkę do pliku
			_, err = file.WriteString(hexFrame + "\n")
			if err != nil {
				fmt.Println("Błąd podczas zapisu do pliku:", err)
				break loop
			}
			fmt.Println("Odebrana ramka hex:", hexFrame)

			header, err := model.DecodeC37Header(frame[:18])
			if err != nil {
				fmt.Println("Błąd dekodowania nagłówka:", err)
				return
			}
			fmt.Printf("Header: %v", header)

			/*
				// Obliczanie czasu UTC
				calculatedTime := model.CalculateTimeUTC(header)
				fmt.Printf("Nagłówek: %+v   czas UTC: %v\n", header, calculatedTime)

				// Example 48 bytes after header, filled with sample data for testing
				data := make([]byte, 48)

				// Pozostałe dane (zakładając, że reszta ramki to 48 bajtów danych)
				data = frame[18:n]
				//fmt.Printf("Pozostałe dane: % X\n", data) // Wyświetla resztę ramki w formie heksadecymalnej

				// Decode the data fields, assuming 2 phasors, 2 analogs, and 1 digital word
				dataFields, err := model.DecodeDataFields(data, 2, 2, 1)
				if err != nil {
					fmt.Println("Error decoding data fields:", err)
					return
				}

				fmt.Printf("Decoded DataFields: %+v\n", dataFields)

			*/
		}
	}

	fmt.Println("Nasłuch zakończony, ramki zapisane do pliku udp_frames.txt.")
}
