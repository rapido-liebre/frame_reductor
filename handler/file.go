package handler

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"frame_reductor/model"
	"os"
	"path/filepath"
)

// ProcessFile - funkcja dla trybu "file"
func ProcessFile() {
	// Przykładowe dane ramki konfiguracyjnej (muszą być rzeczywiste)
	//frameData := []byte{
	// ramka konfiguracyjna 1
	//0xaa, 0x52, 0x00, 0xb6, 0x00, 0x65, 0x67, 0x1e, 0xc1, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x06, 0x53, 0x48, 0x45, 0x4c, 0x42, 0x59, 0x00,
	//0x02, 0xb6, 0x8e, 0x96, 0x27, 0xc9, 0x58, 0x48, 0x35, 0xae, 0x84, 0xee, 0x58, 0x8d, 0x8a, 0x72,
	//0x5f, 0x00, 0x0f, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x05, 0x42, 0x75, 0x73, 0x20, 0x31, 0x05,
	//0x42, 0x75, 0x73, 0x20, 0x32, 0x07, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x76, 0x61, 0x04, 0x44, 0x65,
	//0x6c, 0x6c, 0x0c, 0x4c, 0x61, 0x67, 0x6f, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x65, 0x6b, 0x00,
	//0x08, 0x01, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x3f, 0x80, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09,
	//0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00,
	//0x42, 0x16, 0x00, 0x00, 0xc2, 0xc5, 0x33, 0x33, 0x7f, 0x80, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x2d, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// ramka konfiguracyjna 2
	//0xaa, 0x52, 0x00, 0xb6, 0x00, 0x65, 0x67, 0x26, 0x73, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x06, 0x53, 0x48, 0x45, 0x4c, 0x42, 0x59, 0x00, 0x02, 0xb6,
	//0x8e, 0x96, 0x27, 0xc9, 0x58, 0x48, 0x35, 0xae, 0x84, 0xee, 0x58, 0x8d, 0x8a, 0x72, 0x5f, 0x00,
	//0x0f, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x42, 0x75, 0x73, 0x20, 0x31, 0x05, 0x42, 0x75, 0x73,
	//0x20, 0x32, 0x07, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x76, 0x61, 0x04, 0x44, 0x65, 0x6c, 0x6c, 0x0c,
	//0x4c, 0x61, 0x67, 0x6f, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x65, 0x6b, 0x00, 0x08, 0x01, 0x00,
	//0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x08, 0x0c, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x42, 0x16, 0x00,
	//0x00, 0xc2, 0xc5, 0x33, 0x33, 0x7f, 0x80, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x19, 0x28, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// ramka z danymi 1
	//0xaa, 0x01, 0x00, 0x42, 0x00, 0x65, 0x67, 0x1e, 0xc1, 0x70, 0x00, 0xae, 0x14, 0x7a, 0x00, 0x00,
	//0x48, 0x92, 0x4b, 0xe7, 0x3f, 0xd4, 0x72, 0xe7, 0x48, 0x91, 0xce, 0x86, 0x3f, 0xd4, 0x82, 0x28,
	//0x43, 0x65, 0x87, 0x0a, 0xbf, 0xd2, 0xab, 0x61, 0x43, 0xfb, 0xd8, 0x2b, 0x3f, 0xd4, 0xf1, 0xc7,
	//0x43, 0x54, 0xe7, 0xd8, 0x3f, 0x4e, 0xaa, 0xb8, 0x42, 0x6f, 0xda, 0x1d, 0xbf, 0x21, 0x47, 0xae,
	//0x63, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	// ramka z danymi 1 (PMU)
	//	0xaa, 0x01, 0x00, 0x42, 0x00, 0x65, 0x67, 0x1e, 0xc1, 0x70, 0x00, 0xae, 0x14, 0x7a, 0x00, 0x00,
	//	0x48, 0x92, 0x4b, 0xe7, 0x3f, 0xd4, 0x72, 0xe7, 0x48, 0x91, 0xce, 0x86, 0x3f, 0xd4, 0x82, 0x28,
	//	0x43, 0x65, 0x87, 0x0a, 0xbf, 0xd2, 0xab, 0x61, 0x43, 0xfb, 0xd8, 0x2b, 0x3f, 0xd4, 0xf1, 0xc7,
	//	0x43, 0x54, 0xe7, 0xd8, 0x3f, 0x4e, 0xaa, 0xb8, 0x42, 0x6f, 0xda, 0x1d, 0xbf, 0x21, 0x47, 0xae,
	//	0x63, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	//}

	// Ustaw katalog roboczy jako katalog główny projektu
	workingDir, err := os.Getwd()
	if err != nil {
		fmt.Println("Błąd pobierania katalogu roboczego:", err)
		return
	}
	// Przejdź o dwa poziomy w górę
	projectRoot := filepath.Join(workingDir, "..", "..")
	fmt.Println("Katalog główny projektu:", projectRoot)

	filePath := filepath.Join(projectRoot, "udp_frames_29.12.txt")

	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("Błąd otwierania pliku:", err)
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		line := scanner.Text()

		// Konwersja linii z formatu hex na []byte
		frameData, err := hex.DecodeString(line)
		if err != nil {
			fmt.Println("Błąd dekodowania hex:", err)
			continue
		}

		header, err := model.DecodeC37Header(frameData[:14])
		if err != nil {
			fmt.Println("Błąd dekodowania nagłówka:", err)
			return
		}
		fmt.Printf("Header: %v\n", header)

		switch header.DataFrameType {
		case model.ConfigurationFrame2:
			// Dekodowanie ramki konfiguracyjnej 2
			cfgFrame2, err := model.DecodeConfigurationFrame2(frameData)
			if err != nil {
				fmt.Println("Błąd dekodowania ramki konfiguracyjnej 2:", err)
				return
			}
			fmt.Printf("Decoded configuration frame 2: %+v\n", cfgFrame2)
		case model.ConfigurationFrame3:
			// Dekodowanie ramki konfiguracyjnej 3
			cfgFrame3, err := model.DecodeConfigurationFrame3(frameData)
			if err != nil {
				fmt.Println("Błąd dekodowania ramki konfiguracyjnej 3:", err)
				return
			}
			fmt.Printf("Decoded configuration frame 3: %+v\n", cfgFrame3)
		case model.DataFrame:
			// Dekodowanie ramki z danymi
			dataFrame, err := model.DecodeDataFrame(frameData[14:])
			if err != nil {
				fmt.Println("Błąd dekodowania ramki z danymi:", err)
				return
			}
			fmt.Printf("Decoded data frame: %+v\n", dataFrame)
		}
	}
	// Wyświetlenie informacji o ramce konfiguracyjnej
	//fmt.Printf("Configuration Frame:\n")
	//fmt.Printf("ID Code: %d\n", cfg.IDCode)
	//fmt.Printf("Frame Size: %d\n", cfg.FrameSize)
	//fmt.Printf("Frame Type: %d\n", cfg.FrameType)
	//fmt.Printf("Num PMUs: %d\n", cfg.NumPMUs)
	//fmt.Printf("DataPhasor Names:\n")
	//for i, name := range cfg.PhasorNames {
	//	fmt.Printf("  DataPhasor %d: %s\n", i+1, name)
	//}
}
